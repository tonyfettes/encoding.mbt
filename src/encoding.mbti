package "tonyfettes/encoding"

import(
  "moonbitlang/core/buffer"
)

// Values
const U_REP : Char = 'ï¿½'

fn decode(Bytes, encoding~ : Encoding) -> String!DecodingError

fn decode_lossy(Decoder, Bytes, stream~ : Bool = ..) -> String

fn decode_to(Bytes, StringBuilder, encoding~ : Encoding) -> Unit!

fn encode(String, encoding~ : Encoding) -> Bytes

fn encode_to(String, @buffer.T, encoding~ : Encoding) -> Unit

fn to_utf16be_bytes(Char) -> Bytes

fn to_utf16le_bytes(Char) -> Bytes

fn write_utf16_char(@buffer.T, Char) -> Unit

fn write_utf16be_char(@buffer.T, Char) -> Unit

fn write_utf16le_char(@buffer.T, Char) -> Unit

fn write_utf8_char(@buffer.T, Char) -> Unit

// Types and methods
type Decoder
impl Decoder {
  decode(Self, Bytes, stream~ : Bool = ..) -> String!DecodingError
  decode_lossy(Self, Bytes, stream~ : Bool = ..) -> String
  decode_lossy_to(Self, Bytes, StringBuilder, stream~ : Bool = ..) -> Unit
  decode_to(Self, Bytes, StringBuilder, stream~ : Bool = ..) -> Unit!DecodingError
}

pub type! DecodingError {
  Malformed(Bytes)
  Truncated(Bytes)
}
impl Show for DecodingError

pub(all) enum Encoding {
  UTF8
  UTF16LE
  UTF16BE
}

// Type aliases

// Traits
trait Encode
impl Encode for Char

