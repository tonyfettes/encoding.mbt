package "tonyfettes/encoding"

import(
  "moonbitlang/core/buffer"
  "moonbitlang/core/bytes"
  "moonbitlang/core/string"
)

// Values
const U_REP : Char = 'ï¿½'

fn decode(@bytes.View, encoding~ : Encoding) -> @string.StringView!DecodingError

fn decode_lossy(@bytes.View, encoding~ : Encoding) -> @string.StringView

fn decode_lossy_to(@bytes.View, StringBuilder, encoding~ : Encoding) -> Unit

fn decode_to(@bytes.View, StringBuilder, encoding~ : Encoding) -> Unit!

fn encode[Encode : Encode](Encode, encoding~ : Encoding) -> Bytes

fn encode_to[Encode : Encode](Encode, @buffer.T, encoding~ : Encoding) -> Unit

// Types and methods
type Decoder
impl Decoder {
  decode(Self, @bytes.View, stream~ : Bool = ..) -> @string.StringView!DecodingError
  decode_to(Self, @bytes.View, StringBuilder, stream~ : Bool = ..) -> Unit!DecodingError
}

pub type! DecodingError {
  Malformed(Bytes)
  Truncated(Bytes)
}
impl Show for DecodingError

pub(all) enum Encoding {
  UTF8
  UTF16LE
  UTF16BE
}

// Type aliases

// Traits
pub trait Encode {
  size_hint(Self, encoding~ : Encoding) -> Int
  encode(Self, encoding~ : Encoding) -> Bytes
  encode_to(Self, @buffer.T, encoding~ : Encoding) -> Unit
}
impl Encode for Char
impl Encode for String
impl Encode for @string.StringView

