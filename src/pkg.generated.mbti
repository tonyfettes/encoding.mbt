// Generated using `moon info`, DON'T EDIT IT
package "tonyfettes/encoding"

import(
  "moonbitlang/core/buffer"
  "moonbitlang/core/bytes"
  "moonbitlang/core/string"
)

// Values
const U_REP : Char = 'ï¿½'

fn decode(@bytes.View, encoding~ : Encoding) -> String raise DecodingError

fn decode_lossy(@bytes.View, encoding~ : Encoding) -> String

fn decode_lossy_to(@bytes.View, StringBuilder, encoding~ : Encoding) -> Unit

fn decode_to(@bytes.View, StringBuilder, encoding~ : Encoding) -> Unit raise

fn decoder(Encoding) -> Decoder

fn[Encode : Encode] encode(Encode, encoding~ : Encoding) -> Bytes

fn[Encode : Encode] encode_to(Encode, @buffer.Buffer, encoding~ : Encoding) -> Unit

// Errors
pub suberror DecodingError {
  Malformed(Bytes)
  Truncated(Bytes)
}
impl Show for DecodingError
impl ToJson for DecodingError

// Types and methods
type Decoder
fn Decoder::consume(Self, @bytes.View) -> String raise
fn Decoder::decode(Self, @bytes.View, stream? : Bool) -> String raise DecodingError
fn Decoder::decode_lossy(Self, @bytes.View, stream? : Bool) -> String
fn Decoder::decode_lossy_to(Self, @bytes.View, StringBuilder, stream? : Bool) -> Unit
fn Decoder::decode_to(Self, @bytes.View, StringBuilder, stream? : Bool) -> Unit raise DecodingError
fn Decoder::finish(Self) -> String raise
fn Decoder::lossy_consume(Self, @bytes.View) -> String
fn Decoder::lossy_finish(Self) -> String

pub(all) enum Encoding {
  UTF8
  UTF16LE
  UTF16BE
}

// Type aliases

// Traits
pub trait Encode {
  size_hint(Self, encoding~ : Encoding) -> Int
  encode(Self, encoding~ : Encoding) -> Bytes
  encode_to(Self, @buffer.Buffer, encoding~ : Encoding) -> Unit
}
impl Encode for Char
impl Encode for String
impl Encode for @string.View
